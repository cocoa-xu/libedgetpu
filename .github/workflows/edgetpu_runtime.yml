name: edgetpu-runtime

on:
  pull_request:
    paths-ignore:
        - '**/*.md'
        - 'LICENSE*'
  push:
    tags:
      - 'v*'
    branches:
      - master
      - test-*
    paths-ignore:
    - '**/*.md'
    - 'LICENSE*'

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_linux:
    runs-on: ubuntu-20.04
    env:
      LIBUSB_VER: "1.0.27"
      USE_BAZEL_VERSION: "6.0.0"
      ZIG_VERSION: "0.10.1"

    strategy:
      fail-fast: false
      matrix:
        pair:
          - host: "x86_64-linux-gnu"
            cc: "gcc"
            cxx: "g++"
            cpu: "k8"
            c_compiler: gcc
            cpp_compiler: g++
          - host: "armv7l-linux-gnueabihf"
            cc: "arm-linux-gnueabihf-gcc"
            cxx: "arm-linux-gnueabihf-g++"
            cpu: "armv7a"
            c_compiler: gcc-arm-linux-gnueabihf
            cpp_compiler: g++-arm-linux-gnueabihf
          - host: "armv6-linux-gnueabihf"
            cc: "arm-linux-gnueabihf-gcc"
            cxx: "arm-linux-gnueabihf-g++"
            cpu: "armv6"
            c_compiler: gcc-arm-linux-gnueabihf
            cpp_compiler: g++-arm-linux-gnueabihf
          - host: "aarch64-linux-gnu"
            cc: "aarch64-linux-gnu-gcc"
            cxx: "aarch64-linux-gnu-g++"
            cpu: "aarch64"
            c_compiler: gcc-aarch64-linux-gnu
            cpp_compiler: g++-aarch64-linux-gnu
          - host: "aarch64-linux-musl"
            cc: "zig cc -target aarch64-linux-musl"
            cxx: "zig c++ -target aarch64-linux-musl"
            cpu: "aarch64"
            c_compiler: ""
            cpp_compiler: ""
          - host: "riscv64-linux-gnu"
            cc: "riscv64-linux-gnu-gcc"
            cxx: "riscv64-linux-gnu-g++"
            cpu: "riscv64"
            c_compiler: gcc-riscv64-linux-gnu
            cpp_compiler: g++-riscv64-linux-gnu
          - host: "riscv64-linux-musl"
            cc: "zig cc -target riscv64-linux-musl"
            cxx: "zig c++ -target riscv64-linux-musl"
            cpu: "riscv64"
            c_compiler: ""
            cpp_compiler: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip curl git gzip python3 python3-numpy ca-certificates ${{ matrix.pair.c_compiler }} ${{ matrix.pair.cpp_compiler }}

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Compile libusb
        run: |
          export LIBUSB_INSTALL_DIR="$(pwd)/libusb"
          wget "https://github.com/libusb/libusb/releases/download/v${LIBUSB_VER}/libusb-${LIBUSB_VER}.tar.bz2" -O "libusb-${LIBUSB_VER}.tar.bz2"
          tar -xf "libusb-${LIBUSB_VER}.tar.bz2"
          cd "libusb-${LIBUSB_VER}"
          if [ "${{ matrix.pair.cpu }}" = "armv6" ]; then                                                                           
            curl -fSL https://github.com/nerves-project/toolchains/releases/download/v13.2.0/nerves_toolchain_armv6_nerves_linux_gnueabihf-linux_x86_64-13.2.0-363664F.tar.xz -o nerves_toolchain_armv6_nerves_linux_gnueabihf-linux_x86_64-13.2.0-363664F.tar.xz
            tar -xf nerves_toolchain_armv6_nerves_linux_gnueabihf-linux_x86_64-13.2.0-363664F.tar.xz
            export PATH="$(pwd)/nerves_toolchain_armv6_nerves_linux_gnueabihf-linux_x86_64-13.2.0/bin:${PATH}"
            CC="armv6-nerves-linux-gnueabihf-gcc" CFLAGS="-mabi=aapcs-linux -mfpu=vfp -marm -fstack-protector-strong -mfloat-abi=hard -mcpu=arm1176jzf-s -fPIC -Wl,-z,now -Wl,-z,relro" ./configure --host="arm-linux-gnueabihf" --disable-static --enable-shared --disable-udev --prefix="${LIBUSB_INSTALL_DIR}"
          else
            CC="${{ matrix.pair.cc }}" CFLAGS="-fPIC" ./configure --host="${{ matrix.pair.host }}" --enable-static --disable-shared --disable-udev --prefix="${LIBUSB_INSTALL_DIR}"
          fi
          make -j`nproc`
          make install
          PKG_CONFIG_PATH="${LIBUSB_INSTALL_DIR}/lib/pkgconfig" pkg-config --cflags-only-I libusb-1.0

      - name: Compile libedgetpu
        run: |
          export PKG_CONFIG_PATH="$(pwd)/libusb/lib/pkgconfig"
          echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH}"
          pkg-config --cflags-only-I libusb-1.0 || true

          if [[ "${{ matrix.pair.host }}" == *"musl"* ]]; then
            CPU="${{ matrix.pair.cpu }}" ABI=musl OSSmall=linux make libedgetpu
          elif [ "${{ matrix.pair.cpu }}" = "armv6" ]; then
            cp WORKSPACE.armv6 WORKSPACE
            cp workspace.armv6.bzl workspace.bzl
            cp .bazelrc.armv6 .bazelrc
            cp error_codes.armv6.h port/default/error_codes.h
            CPU="armv6" make libedgetpu
          else
            export CC="${{ matrix.pair.cc }}"
            export CXX="${{ matrix.pair.cxx }}"
            CPU="${{ matrix.pair.cpu }}" make libedgetpu
          fi

      - name: Release
        run: |
          export PACK_DIR=edgetpu_runtime

          export LIBEDGETPU_NAME="${{ matrix.pair.cpu }}"
          export TRIPLET="${{ matrix.pair.host }}"
          bash scripts/pack.sh out "${LIBEDGETPU_NAME}" "${TRIPLET}" "${PACK_DIR}"
          export ARTEFACT_FILENAME="edgetpu_runtime_${TRIPLET}_${GITHUB_REF##*/}"
          tar -czf "${ARTEFACT_FILENAME}.tar.gz" "${PACK_DIR}"
          rm -rf "${PACK_DIR}"

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "edgetpu_runtime_*.tar.gz"

  build_macos:
    runs-on: macos-13
    env:
      USE_BAZEL_VERSION: "6.0.0"
      TF_NEED_HDFS: "0"
      TF_NEED_CUDA: "0"
      TF_NEED_ROCM: "0"
      TF_NEED_MKL: "0"
    strategy:
      fail-fast: false
      matrix:
        pair:
          - cpu: "darwin_arm64"
            triplet: "aarch64-apple-darwin"
          - cpu: "darwin_x86_64"
            triplet: "x86_64-apple-darwin"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install libusb
          pip3 install numpy disutils

      - name: Fix macOS
        run: |
          bazel clean --expunge
          sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
          sudo xcodebuild -license accept
          xcode-select -p
          bazel clean --expunge
          bazel shutdown

      - name: Compile
        run: |
          export PYTHON_BIN_PATH="$(which python3)"
          CPU="${{ matrix.pair.cpu }}" make

      - name: codesign
        run: |
          codesign -f --sign - "$(pwd)/out/direct/${{ matrix.pair.cpu }}/libedgetpu.1.0.dylib"
          codesign -f --sign - "$(pwd)/out/throttled/${{ matrix.pair.cpu }}/libedgetpu.1.0.dylib"

      - name: Release
        run: |
          export PACK_DIR=edgetpu_runtime

          export LIBEDGETPU_NAME="${{ matrix.pair.cpu }}"
          export TRIPLET="${{ matrix.pair.triplet }}"
          bash scripts/pack.sh out "${LIBEDGETPU_NAME}" "${TRIPLET}" "${PACK_DIR}"
          export ARTEFACT_FILENAME="edgetpu_runtime_${TRIPLET}_${GITHUB_REF##*/}"
          tar -czf "${ARTEFACT_FILENAME}.tar.gz" "${PACK_DIR}"
          rm -rf "${PACK_DIR}"

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "edgetpu_runtime_*.tar.gz"
